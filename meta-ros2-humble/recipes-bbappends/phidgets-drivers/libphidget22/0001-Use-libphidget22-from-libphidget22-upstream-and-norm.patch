From f2d9c4b896ba0508b8def8522f83217cd40641da Mon Sep 17 00:00:00 2001
From: Martin Jansa <martin.jansa@lge.com>
Date: Wed, 18 Dec 2019 11:11:30 -0800
Subject: [PATCH] Use libphidget22 from libphidget22-upstream and normal prefix

Upstream-Status: Pending

Signed-off-by: Martin Jansa <martin.jansa@lge.com>
---
 CMakeLists.txt                                     |   40 --
 cmake/libphidget22-extras.cmake.in                 |    4 
 patch/libphidget22-1.9.20220203-fix-warnings.patch |  375 ---------------------
 3 files changed, 3 insertions(+), 416 deletions(-)
 delete mode 100644 patch/libphidget22-1.9.20220203-fix-warnings.patch

diff --git a/CMakeLists.txt b/CMakeLists.txt
index b99d7d00..706e59ae 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3,44 +3,6 @@ project(libphidget22)
 
 find_package(ament_cmake REQUIRED)
 
-set(extra_c_flags "-g -O2 -Wno-incompatible-pointer-types -Wno-deprecated-declarations -Wno-format-truncation -fPIC")
-
-include(ExternalProject)
-ExternalProject_Add(EP_${PROJECT_NAME}
-    URL https://www.phidgets.com/downloads/phidget22/libraries/linux/libphidget22/libphidget22-1.9.20220203.tar.gz
-    URL_MD5 8d8786621b225ecf6569329183774085
-
-    PATCH_COMMAND patch -p1 < ${CMAKE_CURRENT_SOURCE_DIR}/patch/libphidget22-1.9.20220203-fix-warnings.patch
-    SOURCE_DIR ${PROJECT_BINARY_DIR}/${PROJECT_NAME}-src
-    CONFIGURE_COMMAND
-      <SOURCE_DIR>/configure
-      CFLAGS=${extra_c_flags}
-      --prefix=${CMAKE_CURRENT_BINARY_DIR}/libphidget22_install
-      --disable-ldconfig
-    BUILD_COMMAND $(MAKE)
-    INSTALL_COMMAND $(MAKE) install
-)
-
-# The external project will install to the build folder, but we'll install that on make install.
-# Note that we install lib and include separately so we can add the extra level of indirection
-# to the include directory.
-install(
-  DIRECTORY
-    ${CMAKE_CURRENT_BINARY_DIR}/libphidget22_install/lib/
-  DESTINATION
-    ${CMAKE_INSTALL_PREFIX}/opt/libphidget22/lib/
-)
-
-install(
-  DIRECTORY
-    ${CMAKE_CURRENT_BINARY_DIR}/libphidget22_install/include/
-  DESTINATION
-    ${CMAKE_INSTALL_PREFIX}/opt/libphidget22/include/libphidget22/
-)
-
-ament_environment_hooks(env_hook/libphidget22_library_path.sh)
-set(ENV_VAR_NAME "LD_LIBRARY_PATH")
-set(ENV_VAR_VALUE "opt/libphidget22/lib")
-ament_environment_hooks(env_hook/libphidget22_library_path.dsv.in)
+find_package(libphidget22)
 
 ament_package(CONFIG_EXTRAS "cmake/libphidget22-extras.cmake.in")
diff --git a/cmake/libphidget22-extras.cmake.in b/cmake/libphidget22-extras.cmake.in
index 7a386fa1..ccf3d59c 100644
--- a/cmake/libphidget22-extras.cmake.in
+++ b/cmake/libphidget22-extras.cmake.in
@@ -1,3 +1,3 @@
 # TODO(clalancette): Does this work in general?
-list(APPEND @PROJECT_NAME@_INCLUDE_DIRS "${@PROJECT_NAME@_DIR}/../../../opt/libphidget22/include")
-list(APPEND @PROJECT_NAME@_LIBRARIES "${@PROJECT_NAME@_DIR}/../../../opt/libphidget22/lib/libphidget22.so")
+list(APPEND @PROJECT_NAME@_INCLUDE_DIRS "${@PROJECT_NAME@_DIR}/../../../../usr/include")
+list(APPEND @PROJECT_NAME@_LIBRARIES "${@PROJECT_NAME@_DIR}/../../../../usr/lib/libphidget22.so")
diff --git a/patch/libphidget22-1.9.20220203-fix-warnings.patch b/patch/libphidget22-1.9.20220203-fix-warnings.patch
deleted file mode 100644
index 1f456c42..00000000
--- a/patch/libphidget22-1.9.20220203-fix-warnings.patch
+++ /dev/null
@@ -1,375 +0,0 @@
---- a/configure	2022-04-11 12:50:48.972995991 +0000
-+++ b/configure	2022-04-11 12:51:03.292929826 +0000
-@@ -5681,7 +5681,7 @@
- fi
- 
- : ${AR=ar}
--: ${AR_FLAGS=cru}
-+: ${AR_FLAGS=cr}
- 
- 
- 
---- a/src/ext/mos/sha2.c	2022-04-11 12:45:37.030437312 +0000
-+++ b/src/ext/mos/sha2.c	2022-04-11 12:49:05.934472077 +0000
-@@ -518,7 +518,7 @@
- 	usedspace = freespace = 0;
- }
- 
--void mos_SHA256_Final(sha2_byte digest[], SHA256_CTX* context) {
-+void mos_SHA256_Final(uint8_t digest[SHA256_DIGEST_LENGTH], SHA256_CTX* context) {
- 	sha2_word32	*d = (sha2_word32*)(void *)digest;
- 	unsigned int	usedspace;
- 	void *v;
-@@ -584,7 +584,7 @@
- 	usedspace = 0;
- }
- 
--char *mos_SHA256_End(SHA256_CTX* context, char buffer[]) {
-+char *mos_SHA256_End(SHA256_CTX* context, char buffer[SHA256_DIGEST_STRING_LENGTH]) {
- 	sha2_byte	digest[SHA256_DIGEST_LENGTH], *d = digest;
- 	int		i;
- 
-@@ -892,7 +892,7 @@
- 	mos_SHA512_Transform(context, (sha2_word64*)(void *)context->buffer);
- }
- 
--void mos_SHA512_Final(sha2_byte digest[], SHA512_CTX* context) {
-+void mos_SHA512_Final(uint8_t digest[SHA512_DIGEST_LENGTH], SHA512_CTX* context) {
- 	sha2_word64	*d = (sha2_word64*)(void *)digest;
- 
- 	/* Sanity check: */
-@@ -921,7 +921,7 @@
- 	mos_bzero(context, sizeof(*context));
- }
- 
--char *mos_SHA512_End(SHA512_CTX* context, char buffer[]) {
-+char *mos_SHA512_End(SHA512_CTX* context, char buffer[SHA512_DIGEST_STRING_LENGTH]) {
- 	sha2_byte	digest[SHA512_DIGEST_LENGTH], *d = digest;
- 	int		i;
- 
-@@ -969,7 +969,7 @@
- 	mos_SHA512_Update((SHA512_CTX*)context, data, len);
- }
- 
--void mos_SHA384_Final(sha2_byte digest[], SHA384_CTX* context) {
-+void mos_SHA384_Final(uint8_t digest[SHA384_DIGEST_LENGTH], SHA384_CTX* context) {
- 	sha2_word64	*d = (sha2_word64*)(void *)digest;
- 
- 	/* Sanity check: */
-@@ -998,7 +998,7 @@
- 	mos_bzero(context, sizeof(*context));
- }
- 
--char *mos_SHA384_End(SHA384_CTX* context, char buffer[]) {
-+char *mos_SHA384_End(SHA384_CTX* context, char buffer[SHA384_DIGEST_STRING_LENGTH]) {
- 	sha2_byte	digest[SHA384_DIGEST_LENGTH], *d = digest;
- 	int		i;
- 
---- a/src/vintpackets.c	2022-04-11 12:36:25.140989372 +0000
-+++ b/src/vintpackets.c	2022-04-11 12:44:55.814627748 +0000
-@@ -379,7 +379,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -431,7 +431,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -1634,7 +1634,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -1725,7 +1725,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -1779,7 +1779,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -1934,7 +1934,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -2024,7 +2024,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -2516,7 +2516,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -2646,7 +2646,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -2713,7 +2713,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -2729,7 +2729,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		case BP_SETFREQUENCY:
- 			pack32(buf, (uint32_t)(getBridgePacketDouble(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_DIGITALOUTPUT_SETFREQUENCY, buf, 4));
-@@ -2797,7 +2797,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -2813,7 +2813,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		case BP_SETFREQUENCY:
- 			pack32(buf, (uint32_t)(getBridgePacketDouble(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_DIGITALOUTPUT_SETFREQUENCY, buf, 4));
-@@ -2913,7 +2913,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -3071,7 +3071,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -5173,7 +5173,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -5239,7 +5239,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -5594,7 +5594,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -5647,7 +5647,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -5729,7 +5729,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -5779,7 +5779,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -5861,7 +5861,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -5911,7 +5911,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -6617,7 +6617,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -6699,7 +6699,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -6899,7 +6899,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -6982,7 +6982,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -7047,7 +7047,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -7637,7 +7637,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -7653,7 +7653,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		case BP_SETFREQUENCY:
- 			pack32(buf, (uint32_t)(getBridgePacketDouble(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_DIGITALOUTPUT_SETFREQUENCY, buf, 4));
-@@ -7781,7 +7781,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -7866,7 +7866,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -7951,7 +7951,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
-@@ -8397,7 +8397,7 @@
- 			pack16(buf, (uint16_t)(getBridgePacketUInt32(bp, 0)));
- 			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_TIME, buf, 2));
- 		case BP_FAILSAFERESET:
--			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, buf, 0));
-+			return (sendVINTDataPacket(bp->iop, ch, VINT_PACKET_TYPE_FAILSAFE_RESET, NULL, 0));
- 		default:
- 			MOS_PANIC("Unexpected packet type");
- 		}
